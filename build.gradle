apply plugin: 'java'

String VRL_VERSION = '0.4.3.1.0'

buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.1.0')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

def loadProperties(String sourceFileName) {

    def config = new Properties()
    def propFile = new File(projectDir,sourceFileName)

    if (propFile.isFile()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext.set(property.key, property.value)
        }
    }
}


sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'

    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: VRL_VERSION)
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: VRL_VERSION, classifier: 'sources')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: VRL_VERSION, classifier: 'javadoc')

    compile group: 'eu.mihosoft.vrl.jcsg', name:'jcsg', version: '0.5.6'
    compile group: 'eu.mihosoft.vrl.jcsg', name:'jcsg', version: '0.5.6', classifier: 'sources'
    compile group: 'eu.mihosoft.vrl.jcsg', name:'jcsg', version: '0.5.6', classifier: 'javadoc'

    compile group: 'eu.mihosoft.jcsg.ext.path', name:'jcsg-pathextensions', version: '0.2.5'
    compile group: 'eu.mihosoft.jcsg.ext.path', name:'jcsg-pathextensions', version: '0.2.5', classifier: 'sources'
    compile group: 'eu.mihosoft.jcsg.ext.path', name:'jcsg-pathextensions', version: '0.2.5', classifier: 'javadoc'

    compile group: 'eu.mihosoft.jcsg.ext.mesh', name:'jcsg-meshextensions', version: '0.5.1'
    compile group: 'eu.mihosoft.jcsg.ext.mesh', name:'jcsg-meshextensions', version: '0.5.1', classifier: 'sources'
    compile group: 'eu.mihosoft.jcsg.ext.mesh', name:'jcsg-meshextensions', version: '0.5.1', classifier: 'javadoc'

    compile files("lib/jars/")
}


// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {
    // dependencies except VRL
    from configurations.runtime.asFileTree.
            filter({file->return !file.name.startsWith("vrl-0")}).
            files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output.classesDir)
}

// loads the property file
loadProperties('build.properties')

String getVRLDir() {

    String result;

    if (vrldir.isEmpty()) {
        result = System.getProperty("user.home");
        result+= "/.vrl/"
        result+= eu.mihosoft.vrl.system.Constants.VERSION_MAJOR
        result+= "/default"
    } else {
        result = vrldir;
    }

    return result
}

// compiles and installs the vrl plugin to the specified folder
task installVRLPlugin(dependsOn: [clean,jar]) {
    doLast() {
        println(">> copying vrl plugin to: " + getVRLDir() + "/plugin-updates")
        copy {
            from buildDir.getPath() + "/libs/" + rootProject.name + ".jar"
            into getVRLDir() + "/plugin-updates"
            include '**/*.jar'
        }
    }
}

